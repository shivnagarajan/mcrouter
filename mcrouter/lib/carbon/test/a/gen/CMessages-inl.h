/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace carbon {
namespace test_enum {

template <class Writer>
void StructWithEnumField::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, test());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void StructWithEnumField::visitFields(V&& v) {
  if (!v.visitField(1, "test", this->test())) {
    return;
  }
}

template <class V>
void StructWithEnumField::visitFields(V&& v) const {
  if (!v.visitField(1, "test", this->test())) {
    return;
  }
}
} // namespace test_enum
} // namespace carbon

namespace apache {
namespace thrift {
template <>
class Cpp2Ops<carbon::test_enum::StructWithEnumField> {
 public:
  typedef carbon::test_enum::StructWithEnumField Type;
  static constexpr protocol::TType thriftType() {
    return protocol::T_STRUCT;
  }
  static void clear(Type* value) {
    value->__clear();
  }
  template <class Protocol>
  static uint32_t write(Protocol* prot, const Type* value) {
    return value->write(prot);
  }
  template <class Protocol>
  static void read(Protocol* prot, Type* value) {
    value->readNoXfer(prot);
  }
  template <class Protocol>
  static uint32_t serializedSize(Protocol* prot, const Type* value) {
    return value->serializedSize(prot);
  }
  template <class Protocol>
  static uint32_t serializedSizeZC(Protocol* prot, const Type* value) {
    return value->serializedSizeZC(prot);
  }
};
} // namespace thrift
} // namespace apache
